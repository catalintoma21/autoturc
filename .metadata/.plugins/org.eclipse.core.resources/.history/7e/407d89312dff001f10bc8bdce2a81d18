package com.example.inventory.service;

import com.example.stockapp1.entity.StockEntry;
import com.example.stockapp1.entity.Part;
import com.example.stockapp1.repository.StockEntryRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

@Service
public class StockService {
    private final StockEntryRepository stockEntryRepository;
    private final PartService partService;

    public StockService(StockEntryRepository stockEntryRepository, PartService partService) {
        this.stockEntryRepository = stockEntryRepository;
        this.partService = partService;
    }

    @Transactional
    public void addCarToStock(String carModel) throws SQLException {
        List<Part> parts = partService.getPartsByCarModel(carModel);
        if (parts.isEmpty()) {
            throw new SQLException("Nu există piese definite pentru modelul " + carModel);
        }
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String now = LocalDateTime.now().format(dtf);
        for (Part part : parts) {
            StockEntry entry = new StockEntry(
                part.getName(),
                carModel,
                part.getPrice(),
                1,
                now,
                part.getEuro(),
                part.getCode()
            );
            stockEntryRepository.save(entry);
        }
    }

    public List<StockEntry> searchStock(String partName, String carModel, String euro, String code) {
        List<StockEntry> allEntries = stockEntryRepository.findAll();
        return allEntries.stream().filter(entry -> 
            entry.getPartName().toLowerCase().contains(partName.toLowerCase()) &&
            (carModel.equalsIgnoreCase("Toate") || entry.getCarModel().equalsIgnoreCase(carModel)) &&
            (euro.equalsIgnoreCase("Toate") || Integer.toString(entry.getEuro()).equals(euro)) &&
            (code.equalsIgnoreCase("Toate") || entry.getCode().equalsIgnoreCase(code))
        ).toList();
    }

    @Transactional
    public void sellStockEntry(String partName, String carModel, double price, int euro, String code) throws SQLException {
        Optional<StockEntry> optionalEntry = stockEntryRepository.findFirstByPartNameIgnoreCaseAndCarModelIgnoreCaseAndPriceAndEuroAndCodeIgnoreCase(
            partName, carModel, price, euro, code);
        if (optionalEntry.isPresent()) {
            StockEntry entry = optionalEntry.get();
            int currentQuantity = entry.getQuantity();
            if (currentQuantity > 1) {
                entry.setQuantity(currentQuantity - 1);
                stockEntryRepository.save(entry);
            } else {
                stockEntryRepository.delete(entry);
            }
        } else {
            throw new SQLException("Intrarea nu a fost găsită.");
        }
    }
}
